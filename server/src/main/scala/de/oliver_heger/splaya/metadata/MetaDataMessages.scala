/*
 * Copyright 2015 The Developers Team.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.oliver_heger.splaya.metadata

import java.nio.file.Path

import de.oliver_heger.splaya.io.ChannelHandler.ArraySource
import de.oliver_heger.splaya.media.{MediumID, MediaScanResult}
import de.oliver_heger.splaya.mp3.{ID3Header, ID3TagProvider}

/**
 * A message containing data extracted from an ID3 frame to be processed.
 *
 * Messages of this type are produced for each ID3v2 frame found in an MP3
 * audio file. If the frame size is within a configurable limit, its full
 * content is contained. Otherwise, multiple messages of this type are
 * produced for a single ID3 frame.
 *
 * @param path the path to the affected media file
 * @param frameHeader the header of the affected ID3v2 frame
 * @param data binary data of the frame
 * @param lastChunk a flag whether this is the last chunk of this ID3 frame
 */
case class ProcessID3FrameData(path: Path, frameHeader: ID3Header, data: Array[Byte], lastChunk:
Boolean)

/**
 * A message with the meta data result extracted from an ID3v2 frame.
 *
 * A message of this type is generated when an ID3 frame has been fully
 * processed. The actual result - the ID3 tags extracted from the frame - is
 * represented by an [[ID3TagProvider]] object. If the audio file did not
 * contain valid information in this frame, this may be undefined.
 *
 * @param path the path to the affected media file
 * @param frameHeader the header of the processed ID3v2 frame
 * @param metaData an option with the extracted meta data
 */
case class ID3FrameMetaData(path: Path, frameHeader: ID3Header, metaData: Option[ID3TagProvider])

/**
 * A message containing a chunk of data from an MP3 audio file.
 *
 * In order to extract some meta data (like length or ID3v1 data) from an MP3
 * audio file, the file has to be fully read. A message of this type is sent
 * for each chunk of data. It is then dispatched to all actors that need this
 * information in order to do specific processing.
 *
 * @param path the path to the affected media file
 * @param data an ''ArraySource'' containing the chunk of data
 */
case class ProcessMp3Data(path: Path, data: ArraySource)

/**
 * A message with meta data extracted from an MP3 audio file.
 *
 * A message of this type is generated and passed to the meta data collector
 * actor after an MP3 audio file has been read completely. It contains all the
 * results accumulated during file processing.
 *
 * @param path the path to the affected media file
 * @param version the MPEG version
 * @param layer the audio layer version
 * @param sampleRate the sample rate (in samples per second)
 * @param minimumBitRat the minimum bit rate (in bps)
 * @param maximumBitRate the maximum bit rate (in bps)
 * @param duration the duration (rounded, in milliseconds)
 */
case class Mp3MetaData(path: Path, version: Int, layer: Int, sampleRate: Int, minimumBitRat: Int,
                       maximumBitRate: Int, duration: Int)

/**
 * A message with the meta data result extracted from an ID3v1 frame.
 *
 * A message of this type is generated when an MP3 file has been fully
 * processed. If the file contained an ID3v1 frame at the end, it can be
 * extracted and passed to the central collector actor. The meta data is
 * represented by an [[ID3TagProvider]] object. If the audio file did not
 * contain valid ID3v1 information, this may be undefined.
 *
 * @param path the path of the affected media file
 * @param metaData the ID3v1 meta data
 */
case class ID3v1MetaData(path: Path, metaData: Option[ID3TagProvider])

/**
 * A message telling media read actors that a specific media file should be
 * processed.
 *
 * A message of this type is generated for each media file. It is the signal to
 * start processing of the file referred to by this message.
 *
 * @param path the path to the file to be read
 */
case class ReadMediaFile(path: Path)

/**
 * A message indicating that a media file has been fully read.
 *
 * Messages of this type are generated by reader actors when a file has been
 * read completely. This is the signal for some processing actors that now all
 * data is available, and results can be sent to the collector actor.
 *
 * @param path the path of the media file which has been read
 */
case class MediaFileRead(path: Path)

/**
 * A message received by [[MediumProcessorActor]] telling it to start
 * processing now.
 *
 * This message actually initiates the extraction of meta data by the receiving
 * actor instance.
 */
case object ProcessMediaFiles

/**
 * A message with the result of meta data extraction for a single media file.
 *
 * Messages of this type are sent to the meta data manager actor whenever a
 * media file has been processed. The message contains the meta data that
 * could be extracted.
 *
 * @param path the path to the media file
 * @param mediumID the ID of the medium this file belongs to
 * @param metaData an object with the meta data that could be extracted
 */
case class MetaDataProcessingResult(path: Path, mediumID: MediumID, metaData: MediaMetaData)

/**
 * A message sent by [[MediumProcessorActor]] when all media files in its list
 * have been processed.
 *
 * The object containing all processed media files is passed. This gives the
 * receiving meta data manager the chance to react on the completion of a meta
 * data extract operation.
 *
 * @param data the object containing the processed media files
 */
case class MediaFilesProcessed(data: MediaScanResult)
