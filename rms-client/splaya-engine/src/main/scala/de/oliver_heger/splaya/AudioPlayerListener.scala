package de.oliver_heger.splaya

/**
 * A trait defining an event listener interface for notifications sent out by
 * the audio player engine.
 *
 * This listener interface can be used as an alternative to the mechanism to
 * use actors for obtaining messages from the audio player. It is intended to
 * be Java-friendly so that it can be implemented by Java clients. Typical
 * Java event listener terminology is used: There are several notification
 * methods for the different types of events generated by the audio player
 * engine. Each method is passed the corresponding event object.
 */
trait AudioPlayerListener {
  /**
   * Playback of a new audio source has started.
   * @param ev the event object with corresponding properties
   */
  def sourceStarts(ev: AudioPlayerEvent)

  /**
   * Playback of an audio source is complete.
   * @param ev the event object with corresponding properties
   */
  def sourceEnds(ev: AudioPlayerEvent)

  /**
   * Playback starts or is resumed. Events of this type are generated when the
   * audio player engine is told to continue playback (typically in reaction
   * when the user clicks the play button).
   * @param ev the event object with corresponding properties
   */
  def playbackStarts(ev: AudioPlayerEvent)

  /**
   * Playback stops. Events of this type are generated when the audio engine is
   * told to stop playback (e.g. when the user clicks the stop/pause button),
   * and also at the end of the playlist.
   * @param ev the event object with corresponding properties
   */
  def playbackStops(ev: AudioPlayerEvent)

  /**
   * The playback position in the current audio source has changed. Events of
   * this type are fired frequently during playback of an audio source. They
   * give clients the opportunity to keep track of the playback process, e.g.
   * for displaying a progress bar.
   * @param ev the event object with corresponding properties
   */
  def positionChanged(ev: AudioPlayerEvent)

  /**
   * All audio sources in the current playlist have been played.
   * @param ev the event object with corresponding properties
   */
  def playlistEnds(ev: AudioPlayerEvent)

  /**
   * An error has occurred during playback.
   * @param ev the event object with corresponding properties
   */
  def playbackError(ev: AudioPlayerEvent)

  /**
   * The audio engine has completed its shutdown. This is typically the last
   * event generated by an audio player.
   * @param ev the event object with corresponding properties
   */
  def playerShutdown(ev: AudioPlayerEvent)
}
